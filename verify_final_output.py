#!/usr/bin/env python3
"""
Comprehensive verification test for Gemini integration
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from semantic_sentiment_analyzer import SemanticSentimentAnalyzer
import json

print("=" * 70)
print("родрооро┐ро┤рпН рокрпКро░рпБро│рпН роЖропрпНро╡рпБ - роЗро▒рпБродро┐ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ роЪрпЛродройрпИ")
print("Final Verification Test - Tamil Semantic Analysis")
print("=" * 70)

# Initialize analyzer
analyzer = SemanticSentimentAnalyzer()

# Test texts - mix of literary and regular Tamil
test_cases = [
    {
        "name": "родро┐ро░рпБроХрпНроХрпБро▒ро│рпН (Thirukkural)",
        "text": "роЕроХро░ роорпБродро▓ роОро┤рпБродрпНродрпЖро▓рпНро▓ро╛роорпН роЖродро┐ рокроХро╡ройрпН роорпБродро▒рпНро▒рпЗ роЙро▓роХрпБ",
        "expected": "Should identify Thirukkural, роЕродро┐роХро╛ро░роорпН, meaning"
    },
    {
        "name": "роХроорпНрокро░ро╛рооро╛ропрогроорпН (Kambaramayanam)", 
        "text": "роЙро▓роХроорпН ропро╛ро╡рпИропрпБроорпН родро╛роорпН роТро┤ро┐роп ро╡рпЗро▒рпБ роЗро▓рпИ роОройрпНройрпБроорпН роЙродрпНродрооройрпН",
        "expected": "Should identify Kambaramayanam or literary work"
    },
    {
        "name": "роЪро╛родро╛ро░рог ро╡ро╛роХрпНроХро┐ропроорпН (Regular sentence)",
        "text": "роЗройрпНро▒рпБ ро╡ро╛ройроорпН рооро┐роХро╡рпБроорпН роЕро┤роХро╛роХ роЗро░рпБроХрпНроХро┐ро▒родрпБ",
        "expected": "Should provide clear meaning even if not from known book"
    },
    {
        "name": "рокрпБро▒роиро╛ройрпВро▒рпБ (Purananuru)",
        "text": "ропро╛родрпБроорпН роКро░рпЗ ропро╛ро╡ро░рпБроорпН роХрпЗро│ро┐ро░рпН",
        "expected": "Should identify Purananuru, verse 192"
    }
]

print(f"\n{'='*70}")
print(f"Analyzer Status:")
print(f"  тАв Gemini Enabled: {analyzer.gemini_enabled}")
print(f"  тАв Gemini Analyzer Available: {analyzer.gemini_analyzer is not None}")
if analyzer.gemini_analyzer:
    print(f"  тАв Model Name: {analyzer.gemini_analyzer.model_name}")
    print(f"  тАв API Available: {analyzer.gemini_analyzer.is_available}")
print(f"{'='*70}\n")

# Test each case
for i, test_case in enumerate(test_cases, 1):
    print(f"\n{'тФА'*70}")
    print(f"роЪрпЛродройрпИ {i}: {test_case['name']}")
    print(f"{'тФА'*70}")
    print(f"ЁЯУЭ роЙро░рпИ: {test_case['text']}")
    print(f"ЁЯОп роОродро┐ро░рпНрокро╛ро░рпНрокрпНрокрпБ: {test_case['expected']}\n")
    
    try:
        # Analyze
        result = analyzer.analyze_semantic_sentiment(test_case['text'])
        
        # Check if enhanced
        is_enhanced = result.get('enhanced_analysis', False)
        print(f"{'тЬЕ' if is_enhanced else 'тЭМ'} Enhanced Analysis: {is_enhanced}")
        
        if result.get('gemini_error'):
            print(f"тЪая╕П Gemini Error: {result['gemini_error']}")
        
        # Get semantic analysis
        semantic = result.get('semantic_analysis', {})
        meaning = semantic.get('meaning', '')
        source_book = semantic.get('source_book', '')
        
        print(f"\nЁЯУЦ роирпВро▓рпН рокрпЖропро░рпН (Source Book): {source_book if source_book else 'роЕроЯрпИропро╛ро│роорпН роХро╛рогрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ'}")
        
        if semantic.get('chapter_section'):
            print(f"ЁЯУЪ рокроХрпБродро┐: {semantic.get('chapter_section')}")
        if semantic.get('verse_number'):
            print(f"ЁЯФв рокро╛роЯро▓рпН роОрогрпН: {semantic.get('verse_number')}")
        
        print(f"\nЁЯТн рокрпКро░рпБро│рпН ро╡ро┐ро│роХрпНроХроорпН:")
        print(f"{'-'*70}")
        # Show first 500 characters of meaning
        if len(meaning) > 500:
            print(meaning[:500] + "...")
            print(f"\n(роорпКродрпНрод роирпАро│роорпН: {len(meaning)} роОро┤рпБродрпНродрпБроХрпНроХро│рпН)")
        else:
            print(meaning)
        print(f"{'-'*70}")
        
        # Sentiment
        sentiment = result.get('sentiment_analysis', {})
        print(f"\nЁЯШК роЙрогро░рпНро╡рпБ: {sentiment.get('overall_sentiment', 'N/A')} (роироорпНрокро┐роХрпНроХрпИ: {sentiment.get('confidence', 0):.1%})")
        
        # Check quality
        print(f"\nЁЯФН родро░ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ:")
        if is_enhanced:
            if source_book:
                print(f"  тЬЕ роирпВро▓рпН роЕроЯрпИропро╛ро│роорпН роХро╛рогрокрпНрокроЯрпНроЯродрпБ: {source_book}")
            else:
                print(f"  тЪая╕П роирпВро▓рпН роЕроЯрпИропро╛ро│роорпН роХро╛рогрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ (роЪро╛родро╛ро░рог роЙро░рпИропро╛роХ роЗро░рпБроХрпНроХро▓ро╛роорпН)")
            
            if len(meaning) > 200:
                print(f"  тЬЕ ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро┐ро│роХрпНроХроорпН роХро┐роЯрпИродрпНродродрпБ ({len(meaning)} роОро┤рпБродрпНродрпБроХрпНроХро│рпН)")
            else:
                print(f"  тЪая╕П роХрпБро▒рпБроХро┐роп ро╡ро┐ро│роХрпНроХроорпН ({len(meaning)} роОро┤рпБродрпНродрпБроХрпНроХро│рпН)")
            
            # Check if it's the generic fallback
            if "роЙро░рпИропро┐ройрпН родрпЖро│ро┐ро╡ро╛рой ро╡ро┐ро│роХрпНроХроорпН" in meaning and len(meaning) < 150:
                print(f"  тЭМ роорпВро▓рокрпНрокроЯро┐ ро╡ро┐ро│роХрпНроХроорпН (Gemini роЪрпЖропро▓рпНрокроЯро╡ро┐ро▓рпНро▓рпИ)")
            else:
                print(f"  тЬЕ Gemini AI ро╡ро┐ро│роХрпНроХроорпН роХро┐роЯрпИродрпНродродрпБ")
        else:
            print(f"  тЭМ Gemini enhancement роЪрпЖропро▓рпНрокроЯро╡ро┐ро▓рпНро▓рпИ")
            print(f"  тД╣я╕П роорпВро▓рокрпНрокроЯро┐ ро╡ро┐ро│роХрпНроХроорпН роороЯрпНроЯрпБроорпЗ")
        
        print(f"\nтП▒я╕П роЪрпЖропро▓ро╛роХрпНроХ роирпЗро░роорпН: {result.get('processing_time', 'N/A')}")
        
    except Exception as e:
        print(f"тЭМ роЪрпЛродройрпИ родрпЛро▓рпНро╡ро┐: {str(e)}")
        import traceback
        traceback.print_exc()

print(f"\n{'='*70}")
print("роЪрпЛродройрпИ роорпБроЯро┐роирпНродродрпБ - Test Completed")
print(f"{'='*70}\n")

# Final verification summary
print("ЁЯУК роЗро▒рпБродро┐ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ роорпБроЯро┐ро╡рпБ:")
print("-" * 70)
if analyzer.gemini_enabled:
    print("тЬЕ Gemini AI роЗропроХрпНроХрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ")
    print("тЬЕ роорпЗроорпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роХро┐роЯрпИроХрпНроХрпБроорпН")
    print("тЬЕ роирпВро▓рпН роЕроЯрпИропро╛ро│роорпН роХро╛рогрпБроорпН родро┐ро▒ройрпН роЙро│рпНро│родрпБ")
    print("тЬЕ ро╡ро┐ро░ро┐ро╡ро╛рой родрооро┐ро┤рпН ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпН роХро┐роЯрпИроХрпНроХрпБроорпН")
else:
    print("тЭМ Gemini AI роЪрпЖропро▓рпНрокроЯро╡ро┐ро▓рпНро▓рпИ")
    print("тЪая╕П роорпВро▓рокрпНрокроЯро┐ ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпН роороЯрпНроЯрпБроорпЗ роХро┐роЯрпИроХрпНроХрпБроорпН")

print("-" * 70)
print("\nтЬЕ ро╡ро▓рпИродро│родрпНродро┐ро▓рпН роЪрпЛродро┐роХрпНроХ родропро╛ро░ро╛роХ роЙро│рпНро│родрпБ!")
