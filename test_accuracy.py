#!/usr/bin/env python3
"""Test semantic and sentiment accuracy"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from semantic_sentiment_analyzer import SemanticSentimentAnalyzer
import json

print("=" * 80)
print("üß™ TESTING SEMANTIC & SENTIMENT ACCURACY")
print("=" * 80)

analyzer = SemanticSentimentAnalyzer()

test_cases = [
    {
        "name": "‡Æ§‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ±‡Æ≥‡Øç - ‡Æï‡Æü‡Æµ‡ØÅ‡Æ≥‡Øç ‡Æµ‡Ææ‡Æ¥‡Øç‡Æ§‡Øç‡Æ§‡ØÅ",
        "text": "‡ÆÖ‡Æï‡Æ∞ ‡ÆÆ‡ØÅ‡Æ§‡Æ≤ ‡Æé‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡ØÜ‡Æ≤‡Øç‡Æ≤‡Ææ‡ÆÆ‡Øç ‡ÆÜ‡Æ§‡Æø ‡Æ™‡Æï‡Æµ‡Æ©‡Øç ‡ÆÆ‡ØÅ‡Æ§‡Æ±‡Øç‡Æ±‡Øá ‡Æâ‡Æ≤‡Æï‡ØÅ",
        "expected_source": "‡Æ§‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡Æ±‡Æ≥‡Øç",
        "expected_sentiment": "positive/devotional"
    },
    {
        "name": "‡Æï‡ÆÆ‡Øç‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Ææ‡ÆØ‡Æ£‡ÆÆ‡Øç",
        "text": "‡Æâ‡Æ≤‡Æï‡ÆÆ‡Øç ‡ÆØ‡Ææ‡Æµ‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Ææ‡ÆÆ‡Øç ‡Æí‡Æ¥‡Æø‡ÆØ ‡Æµ‡Øá‡Æ±‡ØÅ ‡Æá‡Æ≤‡Øà ‡Æé‡Æ©‡Øç‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ§‡Øç‡Æ§‡ÆÆ‡Æ©‡Øç",
        "expected_source": "‡Æï‡ÆÆ‡Øç‡Æ™‡Æ∞‡Ææ‡ÆÆ‡Ææ‡ÆØ‡Æ£‡ÆÆ‡Øç",
        "expected_sentiment": "positive/devotional"
    },
    {
        "name": "‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø ‡Æâ‡Æ∞‡Øà",
        "text": "‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø‡ÆØ‡Ææ‡Æ© ‡Æ®‡Ææ‡Æ≥‡Øç. ‡Æµ‡Ææ‡Æ¥‡Øç‡Æï‡Øç‡Æï‡Øà ‡ÆÖ‡Æ¥‡Æï‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ.",
        "expected_source": "‡Æö‡Ææ‡Æ§‡Ææ‡Æ∞‡Æ£ ‡Æâ‡Æ∞‡Øà",
        "expected_sentiment": "positive"
    },
    {
        "name": "‡Æö‡Øã‡Æï‡ÆÆ‡Øç ‡Æâ‡Æ∞‡Øà",
        "text": "‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡ÆÆ‡Æø‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Ææ‡Æ© ‡Æ®‡Ææ‡Æ≥‡Øç. ‡Æé‡Æ≤‡Øç‡Æ≤‡Ææ‡ÆÆ‡Øç ‡Æ§‡Æµ‡Æ±‡Ææ‡Æï ‡Æ™‡Øã‡Æï‡Æø‡Æ±‡Æ§‡ØÅ.",
        "expected_source": "‡Æö‡Ææ‡Æ§‡Ææ‡Æ∞‡Æ£ ‡Æâ‡Æ∞‡Øà",
        "expected_sentiment": "negative"
    },
    {
        "name": "‡Æ™‡ØÅ‡Æ±‡Æ®‡Ææ‡Æ©‡ØÇ‡Æ±‡ØÅ",
        "text": "‡ÆØ‡Ææ‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æä‡Æ∞‡Øá ‡ÆØ‡Ææ‡Æµ‡Æ∞‡ØÅ‡ÆÆ‡Øç ‡Æï‡Øá‡Æ≥‡Æø‡Æ∞‡Øç",
        "expected_source": "‡Æ™‡ØÅ‡Æ±‡Æ®‡Ææ‡Æ©‡ØÇ‡Æ±‡ØÅ",
        "expected_sentiment": "positive/philosophical"
    }
]

for i, test in enumerate(test_cases, 1):
    print(f"\n{'='*80}")
    print(f"TEST {i}: {test['name']}")
    print(f"{'='*80}")
    print(f"üìù Input: {test['text']}")
    print(f"üéØ Expected Source: {test['expected_source']}")
    print(f"üí≠ Expected Sentiment: {test['expected_sentiment']}\n")
    
    result = analyzer.analyze_semantic_sentiment(test['text'])
    
    semantic = result.get('semantic_analysis', {})
    sentiment = result.get('sentiment_analysis', {})
    
    # Check semantic analysis
    source_book = semantic.get('source_book', 'N/A')
    meaning = semantic.get('meaning', '')
    
    print(f"üìñ SEMANTIC ANALYSIS:")
    print(f"   ‚úì Source Detected: {source_book}")
    print(f"   ‚úì Meaning Length: {len(meaning)} characters")
    
    if 'chapter_section' in semantic and semantic.get('chapter_section') != '‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Ææ‡Æ§‡ØÅ':
        print(f"   ‚úì Chapter/Section: {semantic.get('chapter_section')}")
    if 'verse_number' in semantic and semantic.get('verse_number') != '‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡Ææ‡Æ§‡ØÅ':
        print(f"   ‚úì Verse Number: {semantic.get('verse_number')}")
    
    print(f"\n   üìÑ ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ≥‡Øç (Meaning):")
    print(f"   {'-'*76}")
    if len(meaning) > 300:
        print(f"   {meaning[:300]}...")
    else:
        print(f"   {meaning}")
    print(f"   {'-'*76}")
    
    # Check sentiment analysis
    sentiment_value = sentiment.get('overall_sentiment', 'N/A')
    confidence = sentiment.get('confidence', 0)
    
    print(f"\nüòä SENTIMENT ANALYSIS:")
    print(f"   ‚úì Sentiment: {sentiment_value}")
    print(f"   ‚úì Confidence: {confidence:.1%}")
    if sentiment.get('explanation'):
        print(f"   ‚úì Explanation: {sentiment.get('explanation')}")
    
    # Verification
    print(f"\n‚úÖ VERIFICATION:")
    enhanced = result.get('enhanced_analysis', False)
    print(f"   ‚Ä¢ Enhanced (Gemini used): {enhanced}")
    
    if enhanced:
        if test['expected_source'].lower() in source_book.lower() or source_book == 'N/A':
            print(f"   ‚Ä¢ Source Match: ‚úÖ")
        else:
            print(f"   ‚Ä¢ Source Match: ‚ö†Ô∏è (Expected: {test['expected_source']}, Got: {source_book})")
        
        if len(meaning) > 200:
            print(f"   ‚Ä¢ Detailed Meaning: ‚úÖ (>{len(meaning)} chars)")
        else:
            print(f"   ‚Ä¢ Detailed Meaning: ‚ö†Ô∏è (Only {len(meaning)} chars)")
    else:
        print(f"   ‚Ä¢ ‚ùå GEMINI NOT USED! Using basic fallback")
    
    print(f"\n‚è±Ô∏è  Processing Time: {result.get('processing_time', 'N/A')}")

print(f"\n{'='*80}")
print("‚úÖ ALL TESTS COMPLETED")
print(f"{'='*80}\n")
