#!/usr/bin/env python3
"""
Test the semantic sentiment analyzer directly
"""

import sys
import os

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from semantic_sentiment_analyzer import SemanticSentimentAnalyzer
import json

def test_semantic_sentiment():
    """Test the semantic sentiment analyzer"""
    
    print("ЁЯзк родрооро┐ро┤рпН рокрпКро░рпБро│рпН рооро▒рпНро▒рпБроорпН роЙрогро░рпНро╡рпБ роЖропрпНро╡рпБ роЪрпЛродройрпИ")
    print("=" * 50)
    
    # Initialize analyzer
    analyzer = SemanticSentimentAnalyzer()
    
    # Test with Tamil text
    test_texts = [
        "роиро╛ройрпН рооро┐роХро╡рпБроорпН роороХро┐ро┤рпНроЪрпНроЪро┐ропро╛роХ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН",  # I am very happy
        "роЗройрпНро▒рпБ рооро┐роХро╡рпБроорпН роЪрпЛроХрооро╛рой роиро╛ро│рпН",  # Today is a very sad day
        "ро╡ро╛ройроорпН роирпАро▓рооро╛роХ роЗро░рпБроХрпНроХро┐ро▒родрпБ рооро▒рпНро▒рпБроорпН рокро▒ро╡рпИроХро│рпН рокро╛роЯрпБроХро┐ройрпНро▒рой"  # The sky is blue and birds are singing
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"\nЁЯУЭ роЪрпЛродройрпИ {i}: {text}")
        print("-" * 40)
        
        try:
            result = analyzer.analyze_semantic_sentiment(text)
            
            # Display results
            print(f"ЁЯза рокрпКро░рпБро│рпН роЖропрпНро╡рпБ:")
            semantic = result.get('semantic_analysis', {})
            print(f"   тАв ро╡ро╛ро░рпНродрпНродрпИроХро│рпН роОрогрпНрогро┐роХрпНроХрпИ: {semantic.get('word_count', 0)}")
            print(f"   тАв родрооро┐ро┤рпН ро╡ро╛ро░рпНродрпНродрпИроХро│рпН: {semantic.get('tamil_word_count', 0)}")
            print(f"   тАв роорпКро┤ро┐: {semantic.get('language_detected', 'unknown')}")
            print(f"   тАв роЪро┐роХрпНроХро▓ро╛рой родройрпНроорпИ: {semantic.get('text_complexity', 'unknown')}")
            print(f"   тАв ро╡ро┐рд╖ропроЩрпНроХро│рпН: {', '.join(semantic.get('key_themes', []))}")
            
            print(f"\nЁЯТн роЙрогро░рпНро╡рпБ роЖропрпНро╡рпБ:")
            sentiment = result.get('sentiment_analysis', {})
            print(f"   тАв роТроЯрпНроЯрпБроорпКродрпНрод роЙрогро░рпНро╡рпБ: {sentiment.get('overall_sentiment', 'unknown')}")
            print(f"   тАв роироорпНрокро┐роХрпНроХрпИ: {sentiment.get('confidence', 0):.2%}")
            
            print(f"\nтП▒я╕П роЪрпЖропро▓ро╛роХрпНроХ роирпЗро░роорпН: {result.get('processing_time', '0.00s')}")
            print(f"ЁЯФз роорпЗроорпНрокроЯрпНроЯ роЖропрпНро╡рпБ: {'тЬЕ' if result.get('enhanced_analysis', False) else 'тЭМ'}")
            
        except Exception as e:
            print(f"тЭМ рокро┐ро┤рпИ: {e}")
    
    print("\n" + "=" * 50)
    print("тЬЕ роЪрпЛродройрпИ роорпБроЯро┐роирпНродродрпБ!")

if __name__ == "__main__":
    test_semantic_sentiment()